(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{396:function(t,a,s){"use strict";s.r(a);var r=s(44),_=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"http2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http2"}},[t._v("#")]),t._v(" HTTP2")]),t._v(" "),s("p",[s("img",{attrs:{src:"/assets/img/http/http2.jpg",alt:"image"}})]),t._v(" "),s("h3",{attrs:{id:"二进制协议"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二进制协议"}},[t._v("#")]),t._v(" 二进制协议")]),t._v(" "),s("ul",[s("li",[t._v("http1.1头信息必须是字符，数据体可以是文本,也可以是二进制")]),t._v(" "),s("li",[t._v("http2 全部都是二进制")]),t._v(" "),s("li",[t._v("HTTP2 所有性能增强的核心在于新的二进制分帧 层，它定义了如何封装 HTTP 消息并在客户端与服 务器之间传输。")])]),t._v(" "),s("h3",{attrs:{id:"头信息压缩"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#头信息压缩"}},[t._v("#")]),t._v(" 头信息压缩")]),t._v(" "),s("p",[t._v("头部信息一样的变相缓存")]),t._v(" "),s("h3",{attrs:{id:"信道复用-多路复用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#信道复用-多路复用"}},[t._v("#")]),t._v(" 信道复用 (多路复用)")]),t._v(" "),s("ul",[s("li",[t._v("同一个连接里面发送多个请求不再需要按照顺序来")]),t._v(" "),s("li",[t._v("在 HTTP 1.x 中，如果客户端要想发起多个并行请求以提升性能，则必须使 用多个 TCP 连接。这种模型也会导致队首阻塞，从而造成底层 TCP 连接的效率低下。")]),t._v(" "),s("li",[t._v("将 HTTP 消息分解为独立的帧，交错发送，然后在另一端重新组装是 HTTP 2 最重要的一项增强。这个机制会在整个网络技术栈中引发一系列连锁反 应，从而带来巨大的性能提升。")])]),t._v(" "),s("h3",{attrs:{id:"应用层的重置连接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#应用层的重置连接"}},[t._v("#")]),t._v(" 应用层的重置连接")]),t._v(" "),s("p",[t._v("http1.1版取消数据流的唯一方法，就是关闭TCP连接。\nhttp2 可以取消某一次请求，同时保证TCP连接还打开着，可以被其他请求使用。")]),t._v(" "),s("h2",{attrs:{id:"服务器推送"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#服务器推送"}},[t._v("#")]),t._v(" 服务器推送")]),t._v(" "),s("p",[t._v("Http2 服务端可以推送，主动向浏览器推送与这个请求相关的资源")]),t._v(" "),s("ul",[s("li",[t._v("http1 解析html页面里面css、js文件, 需要解析到css和js文件发送请求等数据回来渲")]),t._v(" "),s("li",[t._v("http2 解析html里面建立连接，如果有css、js文件，服务端会主动推送到客户端，不再发送请求获取css、js文件")])]),t._v(" "),s("h3",{attrs:{id:"请求优先级设置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#请求优先级设置"}},[t._v("#")]),t._v(" 请求优先级设置")]),t._v(" "),s("p",[t._v("HTTP/2 里的每个 stream 都可以设置依赖 (Dependency) 和权重，可以按依赖树分配优先级，解决了关键请求被阻塞的问题")]),t._v(" "),s("h3",{attrs:{id:"流量控制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#流量控制"}},[t._v("#")]),t._v(" 流量控制")]),t._v(" "),s("p",[t._v("每个 http2 流都拥有自己的公示的流量窗口，它可以限制另一端发送数据。对于每个流来说，两端都必须告诉对方自己还有足够的空间来处理新的数据，而在该窗口被扩大前，另一端只被允许发送这么多数据。")]),t._v(" "),s("h3",{attrs:{id:"http-1-的几种优化可以弃用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-1-的几种优化可以弃用"}},[t._v("#")]),t._v(" HTTP/1 的几种优化可以弃用")]),t._v(" "),s("p",[t._v("合并文件、内联资源、雪碧图、域名分片对于 HTTP/2 来说是不必要的，使用 h2 尽可能将资源细粒化，文件分解地尽可能散，不用担心请求数多")]),t._v(" "),s("p",[t._v("浏览器目前是必须开启https 才能使用http2")]),t._v(" "),s("p",[t._v("相关链接："),s("a",{attrs:{href:"https://http2.akamai.com/demo",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTP 和 HTTP2 对比演示的demo"),s("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=_.exports}}]);